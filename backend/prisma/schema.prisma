// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String        @unique
  password         String
  registrationDate DateTime      @default(now())
  avatar           String?       @db.Text
  accounts         Account[]
  transactions     Transaction[]
  Goal             Goal[]
  opinions         Opinions[]

  @@map("User")
}

model Account {
  id             Int           @id @default(autoincrement())
  name           String
  type           AccountType
  initialBalance Float
  currency       CurrencyType
  creationDate   DateTime      @default(now())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]
  Goals          Goal[]

  @@map("Account")
}

enum AccountType {
  banco
  crédito
  dinero
  inversión
}

enum CurrencyType {
  USD
  EUR
  COP
  MXN
  PEN
  ARS
  CLP
  DOP
  BRL
  BOB
  PYG
  UYU
  VES
  GBP
  JPY
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  transactions Transaction[]

  @@map("Category")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  type        TransactionType
  amount      Float
  description String?
  date        DateTime        @default(now()) @map("creationDate")
  accountId   Int
  userId      Int
  categoryId  Int
  account     Account         @relation(fields: [accountId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
  category    Category        @relation(fields: [categoryId], references: [id])

  @@map("Transaction")
}

enum TransactionType {
  Ingreso
  Gasto
}

model Goal {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  targetAmount Float
  currentType  CurrencyType
  startDate    DateTime     @default(now())
  targetDate   DateTime
  status       GoalStatus   @default(PENDIENTE)
  userId       Int
  accountId    Int
  user         User         @relation(fields: [userId], references: [id])
  account      Account?     @relation(fields: [accountId], references: [id])

  @@map("Goal")
}

enum GoalStatus {
  PENDIENTE
  EN_PROGRESO
  COMPLETADA
  CANCELADA
}

model Opinions {
  id        Int       @id @default(autoincrement())
  opinion   String
  rating    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  @@map("Opinions")
}
